多任务操作：

class MyScheduledService extends ScheduledService<Integer> {
    int i = 0;

    @Override
    protected Task<Integer> createTask() {
        return new Task<>() {
            @Override
            protected Integer call() {
                System.out.println("call");
                return i = i + 1;
            }

            @Override
            protected void updateValue(Integer i) {
                super.updateValue(i);
                System.out.println("updateValue:" + i);
                if (i > 10) {
                    MyScheduledService.this.cancel();
                }
            }
        };
    }
}
MyScheduledService my = new MyScheduledService();
my.setDelay(Duration.millis(0));
my.setPeriod(Duration.millis(100));
my.start();

**************************************************

comboBox中传入并显示对象

User user1 = new User();
User user2 = new User();
User user3 = new User();
user1.setUserId(1);
user1.setUsername("user1");
user1.setPassword("123");
user2.setUserId(2);
user2.setUsername("user2");
user2.setPassword("456");
user3.setUserId(3);
user3.setUsername("user3");
user3.setPassword("789");

cbBox.getItems().addAll(user1, user2, user3);

cbBox.setConverter(new StringConverter<>() {
    @Override
    public String toString(User user) {
    //这个方法在加载页面及选择内容时都会遍历调用两遍，不知道会不会影响性能
        if (user == null) {
            return null;
        }
        return user.getUserId() + "-" + user.getUsername() + "-" + user.getPassword();
    }
    @Override
    public User fromString(String s) {
        return null;
    }
});

**************************************************

comboBox关键字搜索+清空选择

cbBox.getItems().addAll("不选择", "str1", "str2", "str3");
cbBox.setVisibleRowCount(10);
cbBox.setPlaceholder(new Label("没找到"));
obList = cbBox.getItems();

cbBox.getSelectionModel().selectedIndexProperty().addListener((obsValue, oldValue, newValue)->{
    if (cbBox.getSelectionModel().getSelectedIndex() == 0) {
        //选中“不选择”时清空已选内容
        //若使用cbBox.getSelectionModel().clearSelection()方法会报越界异常，原因未知
        //因此只能先清空原有元素，再重新设置
        cbBox.setItems(null);
        cbBox.setItems(obList);
        cbBox.getSelectionModel().clearSelection();
    }
});

field.textProperty().addListener((observableValue, oldValue, newValue) -> {
    if (newValue == null) {
        cbBox.setItems(null);
        return;
    }
    FilteredList<String> newList = obList.filtered(s -> s.contains(newValue));
    if (newList.isEmpty()) {
        cbBox.setItems(null);
    } else {
        cbBox.setItems(newList);
        cbBox.hide();
        cbBox.show();
    }
});

**************************************************

comboBox+checkBox

cbBox.setCellFactory(new Callback<>() {
    @Override
    public ListCell<CheckCbBoxModel> call(ListView<CheckCbBoxModel> checkCbBoxModelListView) {
        return new ListCell<>() {
            private CheckBox cb = new CheckBox();
            private BooleanProperty booleanProperty;

            {
                cb.setOnAction(actionEvent -> {
                    getListView().getSelectionModel().select(getItem());
                    String selected = obList.stream()
                            .filter(CheckCbBoxModel::isSelected)
                            .map(CheckCbBoxModel::getValue)
                            .sorted()
                            .map(i -> i + "")
                            .collect(Collectors.joining(","));
                    cbBox.setPromptText(selected);
                });
            }

            @Override
            protected void updateItem(CheckCbBoxModel checkCbBoxModel, boolean empty) {
                super.updateItem(checkCbBoxModel, empty);
                if (!empty) {
                    if (booleanProperty != null) {
                        cb.selectedProperty().unbindBidirectional(booleanProperty);
                    }
                    booleanProperty = checkCbBoxModel.selectedProperty();
                    cb.selectedProperty().bindBidirectional(booleanProperty);
                    setGraphic(cb);
                    setText(checkCbBoxModel.getValue() + "");
                } else {
                    setGraphic(null);
                    setText(null);
                }
            }
        };
    }
});

cbBox.setButtonCell(new ListCell<>() {
    @Override
    protected void updateItem(CheckCbBoxModel checkCbBoxModel, boolean empty) {
        super.updateItem(checkCbBoxModel, empty);
        String selected = cbBox.getItems()
                .stream()
                .filter(CheckCbBoxModel::isSelected)
                .map(CheckCbBoxModel::getValue).sorted()
                .map(i -> i + "")
                .collect(Collectors.joining(","));
        setText(selected);
        System.out.println(3);
    }
});